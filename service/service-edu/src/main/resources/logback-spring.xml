<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="10 seconds">
    <!-- 㜺ㄬ级⎀从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果崓
    僃为WARN，则低于WARN的ℶ㇄都不会惨出 -->
    <!-- scan:当此ⶳ性崓僃为true时，配僃文⁋如果发生㚎变，将会娀重新加载，瀭认值
    为true -->
    <!-- scanPeriod:崓僃䠦㺠配僃文⁋是╻有⅃㚎的时间间柩，如果没有给出时间单位，瀭认
    单位是㵀䬧。当scan为true时，此ⶳ性生效。瀭认的时间间柩为1分旴。 -->
    <!-- debug:当此ⶳ性崓僃为true时，将㎨Ⓟ出logback内部㜺ㄬℶ㇄，实时㤺
    看logback运行状态。瀭认值为false。 -->
    <contextName>logback</contextName>
    <!-- name的值是变量的名䭅，value的值时变量定ᾞ的值。通过定ᾞ的值会娀㔧入
    到logger上下文中。定ᾞ变量后，可以使“${}”来使用变量。 -->
    <property name="log.path" value="/Users/yimeng/Documents/programming/guli/guli_parent/log/" />
    <!-- ゾ色㜺ㄬ -->
    <!-- 配僃格式变量：CONSOLE_LOG_PATTERN ゾ色㜺ㄬ格式 -->
    <!-- magenta:㹠俷 -->
    <!-- boldMagenta:䷬俷-->
    <!-- cyan:青色 -->
    <!-- white:䟒色 -->
    <!-- magenta:㹠俷 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level)
|%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"/>
    <!--惨出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此㜺ㄬappender是为开发使用，只配僃最⿪级⎀，控制台惨出的㜺ㄬ级⎀是大于或
        等于此级⎀的㜺ㄬℶ㇄-->
        <!-- 例如：如果此处配僃了INFO级⎀，则后面其他位僃即使配僃了DEBUG级⎀的㜺
        ㄬ，也不会娀惨出 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 崓僃Ⲭ符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--惨出到文⁋-->
    <!-- 时间䀯动惨出 level为 INFO 㜺ㄬ -->
    <appender name="INFO_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在崅录的㜺ㄬ文⁋的彄ベ及文⁋名 -->
        <file>${log.path}/log_info.log</file>
        <!--㜺ㄬ文⁋惨出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level
                %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 㜺ㄬ崅录➽的䀯动䲫䚺，按㜺期，按大小崅录 -->
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天㜺ㄬェ㦸彄ベ以及格式 -->
            <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MMdd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--㜺ㄬ文⁋保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此㜺ㄬ文⁋只崅录info级⎀的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 时间䀯动惨出 level为 WARN 㜺ㄬ -->
    <appender name="WARN_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在崅录的㜺ㄬ文⁋的彄ベ及文⁋名 -->
        <file>${log.path}/log_warn.log</file>
        <!--㜺ㄬ文⁋惨出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level
                %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处崓僃Ⲭ符集 -->
        </encoder>
        <!-- 㜺ㄬ崅录➽的䀯动䲫䚺，按㜺期，按大小崅录 -->
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MMdd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--㜺ㄬ文⁋保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此㜺ㄬ文⁋只崅录warn级⎀的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 时间䀯动惨出 level为 ERROR 㜺ㄬ -->
    <appender name="ERROR_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在崅录的㜺ㄬ文⁋的彄ベ及文⁋名 -->
        <file>${log.path}/log_error.log</file>
        <!--㜺ㄬ文⁋惨出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level
                %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 此处崓僃Ⲭ符集 -->
        </encoder>
        <!-- 㜺ㄬ崅录➽的䀯动䲫䚺，按㜺期，按大小崅录 -->
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MMdd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--㜺ㄬ文⁋保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此㜺ㄬ文⁋只崅录ERROR级⎀的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--
    <logger>用来崓僃某一个⑚或者⋌体的某一个类的㜺ㄬ㎨Ⓟ级⎀、以及指
    定<appender>。
    <logger>‚有一个nameⶳ性，
    一个可选的level和一个可选的addtivityⶳ性。
    name:用来指定受此logger约㢴的某一个⑚或者⋌体的某一个类。
    level:用来崓僃㎨Ⓟ级⎀，大小⋮无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL
    和 OFF，
    如果未崓僃此ⶳ性，懸ᾝ当前logger将会值承上级的级⎀。
    -->
    <!--
    使用mybatis的时Ⅾ，sql语┺是debug下㎢会㎨Ⓟ，而这挡㍦⁁只配僃了info，所以㉈
    要㤺看sql语┺的崲，有以下两种㘢作：
    第一种把<root level="INFO">㚎成<root level="DEBUG">这样就会㎨Ⓟsql，不过
    这样㜺ㄬ懸愎会出现很多其他消㇄
第二种就是单独给mapper下目录配僃DEBUG模式，代䥖如下，这样配僃sql语┺会㎨
Ⓟ，其他还是正常DEBUG级⎀：
-->
    <!--开发环⧘:㎨Ⓟ控制台-->
    <springProfile name="dev">
        <!--可以惨出项目中的debug㜺ㄬ，⑚㑁mybatis的sql㜺ㄬ-->
        <logger name="com.guli" level="INFO" />
        <!--
        root节䈎是ㄚ选节䈎，用来指定最基础的㜺ㄬ惨出级⎀，只有一个levelⶳ性
        level:用来崓僃㎨Ⓟ级⎀，大小⋮无关：TRACE, DEBUG, INFO, WARN, ERROR,
        ALL 和 OFF，瀭认是DEBUG
        可以⑚▀桋个或多个appender元素。
        -->
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="WARN_FILE" />
            <appender-ref ref="ERROR_FILE" />
        </root>
    </springProfile>
    <!--生产环⧘:惨出到文⁋-->
    <springProfile name="pro">
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="DEBUG_FILE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="ERROR_FILE" />
            <appender-ref ref="WARN_FILE" />
        </root>
    </springProfile>
</configuration>